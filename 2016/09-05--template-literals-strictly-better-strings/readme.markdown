<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/template-literals-strictly-better-strings">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/template-literals-strictly-better-strings"><div><img src="https://i.imgur.com/mh3JG2O.jpg" alt="Template Literals are Strictly Better Strings"></div></a>

<h1>Template Literals are Strictly Better Strings</h1>

<p><kbd>template-literals</kbd> <kbd>es6</kbd> <kbd>best-practices</kbd></p>

<blockquote><p>This article explores how template literals are strictly better than strings, and how they too should become the new default of a post-ES6 era <em>&#x2013; over single and double quoted strings.</em></p>
</blockquote>

<div><p>The majority of the community has implicitly agreed on using <code class="md-code md-code-inline">const</code> as the default over <code class="md-code md-code-inline">var</code>. The <code class="md-code md-code-inline">const</code> statement makes your code more clear, by describing a read-only value at declaration time. It also makes it clear that the variable isn&#x2019;t meant to be used before its declaration, avoiding silly mistakes that could occur when using <code class="md-code md-code-inline">var</code>. For these reasons, <code class="md-code md-code-inline">const</code> also improves interaction with static analysis tools such as <code class="md-code md-code-inline">eslint</code>.</p> <p>This article explores how template literals are strictly better than strings, and how they too should become the new default of a post-ES6 era <em>&#x2013; over single and double quoted strings.</em></p></div>

<blockquote></blockquote>

<div><p>Strictly better is a term I picked up from my tenure as a Magic* player. According to the definition, a Magic card is said to be <a href="http://mtgsalvation.gamepedia.com/Strictly_better" target="_blank" rel="noopener noreferrer" aria-label="Strictly better definition in the MTG Salvation Wiki">strictly better</a> than another when it&#x2019;s better in some way but isn&#x2019;t worse in any way.</p> <blockquote> <p><strong>Strictly better</strong> describes a card which is, in isolation from other effects, superior to another card in at least one respect, while being worse in zero respects.</p> </blockquote> <p><sub>* a fantasy trading card game, it&#x2019;s kind of like a mix between chess and poker. <em><a href="http://magic.wizards.com/en/events/coverage/braga-outlasts-record-competition-buenos-aires#9" target="_blank" rel="noopener noreferrer" aria-label="Grand Prix-Buenos Aires 2008 &#x2013; I can&apos;t figure out whether I was a bigger nerd then, or today.">Yeah.</a></em></sub></p> <p>When I say that template literals are strictly better than single and double quoted strings, I mean that they are superior in several respects while not being worse in any aspects. As noted in <a href="http://mtgsalvation.gamepedia.com/Strictly_better" target="_blank" rel="noopener noreferrer" aria-label="Strictly better definition in the MTG Salvation Wiki">the definition</a>, there&#x2019;s always some situations in which a &#x201C;strictly better&#x201D; card could in fact be worse than the other, but these situations are atypical enough that we can get away with using the &#x201C;strictly better&#x201D; terminology on a figurative basis.</p> <p>So how exactly are template literals strictly better than single and double quoted strings? And why haven&#x2019;t they pervasively taken over single and double quoted strings, if that were the case?</p> <p>Read on and find out.</p></div>

<div><h1 id="expression-interpolation">Expression Interpolation</h1> <p>Assuming an ES6 codebase, there are several ways to do interpolation in strings.</p> <p>You could use string concatenation, involving <code class="md-code md-code-inline">+</code> signs and a string for each piece of the template you&#x2019;re working on. Using concatenation can quickly get out of hand when dealing with longer templates, not to mention reusability is hard unless you abstract away your template in a small function.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-string">&apos;Hello &apos;</span> + name + <span class="md-code-string">&apos;! It\&apos;s a pleasure to greet you.&apos;</span>
</code></pre> <p>You could use <code class="md-code md-code-inline">util.format</code> in Node. Here we have placeholders such as <code class="md-code md-code-inline">%s</code> which describes how the value is to be formatted, but doesn&#x2019;t say anything about the value that should be placed in that socket in the template. This method <em>&#x2013; and similar ones &#x2013;</em> scales better than string concatenation, but it can be difficult to infer the context for each replacement value in the template without a small function that matches its arguments to each value for the template.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">util.format(<span class="md-code-string">&apos;Hello %s! It\&apos;s a pleasure to greet you.&apos;</span>, name)
</code></pre> <p>You could use <a href="https://ponyfoo.com/articles/es6-template-strings-in-depth" aria-label="ES6 Template Literals in Depth on Pony Foo">string interpolation in template literals</a>. Here you can inline JavaScript expressions such as <code class="md-code md-code-inline">expression</code> wrapped in <code class="md-code md-code-inline">${expression}</code>. It&#x2019;s nice to have a name for the slot, such as the <code class="md-code md-code-inline">name</code> for the person you&#x2019;re greeting, placed directly within the template.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">`Hello ${name}! It&apos;s a pleasure to greet you.`
</code></pre> <p>Of course, nothing is stopping you from using template literals in the previous two incarnations of interpolation. Overlooking the fact that we should probably be just using expression interpolation within a single template literal, nothing stops us from using template literals in the exact same way as we used quoted strings.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">`Hello ` + name + `! It&apos;s a pleasure to greet you.`
util.format(`Hello %s! It&apos;s a pleasure to greet you.`, name)
</code></pre> <p>Template literals give us the choice to interpolate inline in the string, if we want to, while quoted strings don&#x2019;t. As an added bonus, interpolation could be several levels deep: any expressions <em>&#x2013; including other template literals &#x2013;</em> can be used for interpolations.</p> <h1 id="character-escaping">Character Escaping</h1> <p>This one is fairly minor, but it&#x2019;s still worth pointing out.</p> <p>In single quoted strings, we need to escape single quotes using <code class="md-code md-code-inline">\&apos;</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-string">&apos;What\&apos;s that?&apos;</span>
</code></pre> <p>In double quoted strings, we need to escape double quotes using <code class="md-code md-code-inline">\&quot;</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-string">&quot;Hey, who&apos;s \&quot;that\&quot; are you referring to?&quot;</span>
</code></pre> <p>In template literals, we need to escape backticks using <code class="md-code md-code-inline">\`</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">`Hey, programmers use backticks to render code <span class="md-code-keyword">in</span> Markdown, like \`<span class="md-code-keyword">this</span>\`.`
</code></pre> <p>We also need to escape any dollar sign followed by an opening curly brace used to start template expressions. This can be done by escaping either the dollar sign, or the brace, or both. (It&#x2019;s hard to think of cases where this sequence of two characters might find its way into a string literal. As an unlikely example, the random symbols below are called <a href="https://en.wiktionary.org/wiki/grawlix" target="_blank" rel="noopener noreferrer">grawlix</a> or &#x201C;symbol swearing&#x201D;.)</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">var message = `Check out this string literal example: \`Hello \${foo}!\`. It&apos;s #!$\{^% great!`
console.log(message)
// &gt; Check out this string literal example: `Hello ${foo}!`. It&apos;s #!${^% great!
</code></pre> <p>You&#x2019;re far less likely to need backticks in your everyday strings than single or double quotes, which are commonplace in English and language in general. The sequence &#x201C;${&#x201D; is unlikely to be seen except in random character sequences. Using template literals, then, translates into less escape codes that can pollute your otherwise beautiful strings.</p> <h1 id="multiline-strings">Multiline Strings</h1> <p>Making regular strings multiline can be annoying. We have a variety of options, though, for both single and double quoted strings.</p> <p>Using an array and then concatenating with <code class="md-code md-code-inline">\n</code> is possibly my favorite approach. Here we need individual strings per line, and the surrounding array with its join, but there&#x2019;s no escaping involved.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">[
  <span class="md-code-string">&apos;# Ingredients&apos;</span>,
  <span class="md-code-string">&apos;&apos;</span>,
  <span class="md-code-string">&apos;- 2x Tomato&apos;</span>,
  <span class="md-code-string">&apos;- 2x Lemon&apos;</span>,
  <span class="md-code-string">&apos;- 300cc Vodka&apos;</span>,
  <span class="md-code-string">&apos;- Pepper&apos;</span>
].join(<span class="md-code-string">&apos;\n&apos;</span>)
</code></pre> <p>An almost identical approach, that seems more typically favored by JavaScript developers, is to concatenate using <code class="md-code md-code-inline">+</code>. In this case we&#x2019;d have to add our <code class="md-code md-code-inline">\n</code> ourselves. Typically, however, developers do not mind the lack of new lines because their multiline string is used to declare a piece of HTML for Angular and jQuery applications. Using <code class="md-code md-code-inline">+</code> is a bit noisier than using <code class="md-code md-code-inline">,</code>, and we&#x2019;d have to hand-roll our <code class="md-code md-code-inline">\n</code>, but it does allow for us to use a single string. Even though inline HTML is far from ideal, avoiding new lines is hardly a problem on top of that.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-string">&apos;&lt;div&gt;&apos;</span> +
  <span class="md-code-string">&apos;&lt;span&gt;Hello &lt;/span&gt;&apos;</span> +
  <span class="md-code-string">&apos;&lt;span&gt;&apos;</span> +
  name +
  <span class="md-code-string">&apos;&lt;/span&gt;&apos;</span> +
<span class="md-code-string">&apos;&lt;/div&gt;&apos;</span>
</code></pre> <p>An approach you hardly ever see is using <code class="md-code md-code-inline">\n</code> new line escapes followed by an escape <code class="md-code md-code-inline">\</code> that allows you to continue writing the same string on a new line. This is noisy on the right hand side, but not as noisy on the left hand side, but it does allow for us to use a single string.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-string">&apos;# Ingredients\n\
\n\
- 2x Tomato\n\
- 2x Lemon\n\
- 300cc Vodka\n\
- Pepper&apos;</span>
</code></pre> <p>Plus, if you don&#x2019;t need the <code class="md-code md-code-inline">\n</code> escapes, <em>&#x2013; as is the case with HTML strings &#x2013;</em> you can end up with quite decent looking strings.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-string">&apos;&lt;div&gt;\
  &lt;span&gt;Hello &lt;/span&gt;\
  &lt;span&gt;&apos;</span> +
  name +
  <span class="md-code-string">&apos;&lt;/span&gt;\
&lt;/div&gt;&apos;</span>
</code></pre> <p>Wait, that didn&#x2019;t look so great. That&#x2019;s because as soon as we have some sort of interpolation in the string, we&#x2019;re back to concatenating, and it can get awful.</p> <p>Then there&#x2019;s other less frequently surfaced approaches, such as using a comment in a function and a library to extract the comment into a multiline string. Here&#x2019;s an example using Sindre&#x2019;s <a href="https://github.com/sindresorhus/multiline" target="_blank" rel="noopener noreferrer" aria-label="sindresorhus/multiline on GitHub"><code class="md-code md-code-inline">multiline</code></a> package. This approach only has noise on the beginning and end of the declaration, but not within, which is why it can be preferred. It does involve a third party package and a convoluted hack just to render multiline strings, which some people could take issue with.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">multiline(<span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">()</span></span>{<span class="md-code-comment">/*
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;body&gt;
    &lt;h1&gt;Pony Foo&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
*/</span>});
</code></pre> <p>When it comes to template literals, multiline support is included by default. The following example, using template literals, is equivalent to the previous one where we used <code class="md-code md-code-inline">multiline</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">`&lt;!doctype html&gt;
<span><span class="md-code-tag">&lt;<span class="md-code-title">html</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">body</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">h1</span>&gt;</span>Pony Foo<span class="md-code-tag">&lt;/<span class="md-code-title">h1</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">html</span>&gt;</span>`
</span></code></pre> <p>If you have expressions you need to interpolate into your multiline strings, template literals aren&#x2019;t shaken up like other approaches.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">`&lt;!doctype html&gt;
<span><span class="md-code-tag">&lt;<span class="md-code-title">html</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">body</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">h1</span>&gt;</span><mark class="md-mark md-code-mark">${title}</mark><span class="md-code-tag">&lt;/<span class="md-code-title">h1</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">html</span>&gt;</span>`
</span></code></pre> <p>Plus, if you&#x2019;re worried about XSS and you&#x2019;d like to HTML-encode interpolations, you could use tagged templates that automatically do this for you. The following example uses an <code class="md-code md-code-inline">encode</code> tagged template to escape interpolations in an HTML string using a brittle <code class="md-code md-code-inline">escape</code> implementation.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">encode</span> <span class="md-code-params">(template, ...expressions)</span> </span>{
  <span class="md-code-keyword">const</span> <span class="md-code-built_in">escape</span> = text =&gt; text
    .replace(<span class="md-code-regexp">/&amp;/g</span>, `&amp;amp;`)
    .replace(<span class="md-code-regexp">/&quot;/g</span>, `&amp;quot;`)
    .replace(<span class="md-code-regexp">/&apos;/g</span>, `&amp;#<span class="md-code-number">39</span>;`)
    .replace(<span class="md-code-regexp">/&lt;/g</span>, `&amp;lt;`)
    .replace(<span class="md-code-regexp">/&gt;/g</span>, `&amp;gt;`)

  <span class="md-code-keyword">return</span> template.reduce((result, part, i) =&gt; {
    <span class="md-code-keyword">return</span> result + <mark class="md-mark md-code-mark">escape(expressions[i - <span class="md-code-number">1</span>])</mark> + part)
  })
}

<span class="md-code-keyword">const</span> title = `&lt;script src=<span class="md-code-string">&apos;https://malicio.us/js&apos;</span>&gt;<span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>`

<mark class="md-mark md-code-mark">encode</mark>`<span class="md-code-doctype">&lt;!doctype html&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">html</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">body</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">h1</span>&gt;</span>${title}<span class="md-code-tag">&lt;/<span class="md-code-title">h1</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">html</span>&gt;</span>`
</span></code></pre> <p>The resulting string is plain HTML, where interpolated expressions have been HTML encoded.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-doctype">&lt;!doctype html&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">html</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">body</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">h1</span>&gt;</span>&amp;lt;script src=&amp;#39;https://malicio.us/js&amp;#39;&amp;gt;&amp;lt;/script&amp;gt;<span class="md-code-tag">&lt;/<span class="md-code-title">h1</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">html</span>&gt;</span>
</code></pre> <p>Again, you have the option of doing all of this, but nothing impedes you from applying any of the previous approaches to template literals.</p> <h1 id="but-json">But, JSON.</h1> <p>The JSON argument is bound to come up, but we can shrug it off as a weak one. In JSON, strings <em>&#x2013; and even property keys &#x2013;</em> must be double quoted.</p> <pre class="md-code-block"><code class="md-code md-lang-json">{
  &quot;<span class="md-code-attribute">key</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;value&quot;</span>
</span>}
</code></pre> <p>You can&#x2019;t use single quotes to declare strings in JSON, yet they are typically favored over double quotes when it comes to JavaScript code. The same argument can, <em>by transitive property</em>, be applied to template literals: you can&#x2019;t use template literals to declare strings in JSON, yet they should be favored over single or double quotes.</p> <h1 id="choose-your-weapon">Choose Your Weapon</h1> <p>Here&#x2019;s a Twitter poll I ran last week, asking about whether people are using template literals as their default string representation of choice.</p> <figure class="twitter-tweet-figure figure-has-loaded"><blockquote class="twitter-tweet"><p>&#x1F411; How do you prefer your JavaScript strings?<br>&#x1F4A1; Strongly prefer template literals<br>&#x1F693; No need to escape, interpolation</p>&#x2014; Nicol&#xE1;s Bevacqua (@nzgb) <a href="https://twitter.com/nzgb/status/772811506270470144">September 5, 2016</a></blockquote> </figure><p>Half of respondents still use single quotes, where close to half claim to be prefer template literals. Some replied to my tweet saying that they use template literals when they explicitly need interpolation or multiline support, but otherwise fall back to single quoted strings.</p> <p>Using backticks is better because you rarely need to escape backticks <code class="md-code md-code-inline">\`</code> or <code class="md-code md-code-inline">\${</code>, you get multiline support, and you get variable interpolation. Many admitted they&#x2019;d switch over from single quoted strings to template literals when interpolation or multiline support was required, so why not switch everything over by default and take advantage of the lower amount of escapes?</p> <p>The only valid argument I&#x2019;ve read against using template literals, much like with <code class="md-code md-code-inline">const</code>, is that people are used to single quoted strings. While familiarity is a fair claim, you can conjure up the habit of using template literals very quickly, as we&#x2019;ll explore next.</p> <h1 id="using-eslint-the-quotes-rule">Using <code class="md-code md-code-inline">eslint</code>: the <code class="md-code md-code-inline">quotes</code> Rule</h1> <p><a href="http://eslint.org/" target="_blank" rel="noopener noreferrer" aria-label="The Pluggable JavaScript Linter">ESLint</a> is a modern linter for JavaScript code bases. If you&#x2019;re still on another linter, I strongly encourage you to check it out.</p> <p>The <a href="https://github.com/ponyfoo/ponyfoo/blob/e10c224c44c8a9c69c52ca2afc19a849bd4059f2/.eslintrc.json#L14" target="_blank" rel="noopener noreferrer" aria-label="An example .eslintrc.json file"><code class="md-code md-code-inline">&quot;quotes&quot;</code> rule</a> tells ESLint that string literals must be declared using backticks, or template literals, and that otherwise an error should be reported. This way we can ensure that, going forward, we&#x2019;re using template literals across our codebase.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-string">&quot;quotes&quot;</span>: [<span class="md-code-string">&quot;error&quot;</span>, <span class="md-code-string">&quot;backtick&quot;</span>]
</code></pre> <p><em>&#x201C;But, Nico&#x201D;</em> &#x2013; you may object &#x2013; <em>&#x201C;a rule like this would report hundreds of stylistic errors in my code base, and I have no time to fix all of that.&#x201D;</em>. You&#x2019;d be absolutely right.</p> <p>ESLint ships with a <code class="md-code md-code-inline">--fix</code> flag for its CLI, where it&#x2019;ll attempt to resolve stylistic issues, before reporting them as hard errors. If an stylistic issue can be fixed, then <code class="md-code md-code-inline">--fix</code> will take care of it for you without ever complaining about it. As it turns out, the <code class="md-code md-code-inline">quotes</code> rule is an stylistic choice that is easily fixed with <code class="md-code md-code-inline">--fix</code>.</p> <p>The following command would turn all your strings into template literals, provided you&#x2019;ve set up the <code class="md-code md-code-inline">quotes</code> rule to <code class="md-code md-code-inline">&quot;backtick&quot;</code>.</p> <pre class="md-code-block"><code class="md-code">eslint --fix .
</code></pre> <p>Ta-da! &#x1F389;</p> <p>You may find your code base now has bits like the following, instead of the single quoted strings you previously had.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">`Hello ` + name + `!`
</code></pre> <p>You can gradually upgrade code like the above into interpolated expressions over time, getting to a more consistent code base. There&#x2019;s no excuse, <em>however</em>, to get away with not using template literals!</p> <blockquote> <h4 id="quick-disclaimer-use-strict-directives"><strong>Quick Disclaimer: <code class="md-code md-code-inline">&apos;use strict&apos;</code> Directives</strong></h4> <p><em>Note the <code class="md-code md-code-inline">&apos;use strict&apos;</code> directive won&#x2019;t be executed if wrapped in backticks instead of single or double quotes. While <code class="md-code md-code-inline">eslint --fix</code> doesn&#x2019;t break <code class="md-code md-code-inline">&apos;use strict&apos;</code> statements, you could mistakenly do that by hand, so please avoid doing so! &#x1F628;</em></p> </blockquote> <p>Now go evangelize the use of template literals everywhere, so that I can sleep better at night. &#x1F312;</p> <p><em><sub>This article is sponsored by the backtick conglomerate holding commonly referred to as &#x201C;best practices&#x201D;.</sub></em></p></div>
