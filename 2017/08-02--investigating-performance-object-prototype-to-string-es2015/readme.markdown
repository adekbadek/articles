<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/investigating-performance-object-prototype-to-string-es2015">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/investigating-performance-object-prototype-to-string-es2015"><div><img src="https://images.ponyfoo.com/uploads/microscope-275984-da789ca5e71c476e8ae5c332225a161e.jpg" alt="Investigating Performance of Object#toString in ES2015"></div></a>

<h1>Investigating Performance of Object#toString in ES2015</h1>

<p><kbd>performance</kbd> <kbd>internals</kbd> <kbd>v8</kbd></p>

<blockquote><p>We discuss how <code>Object#toString</code>  performs in the V8 engine, why it&#x2019;s important, how it changed with ES2015 symbols, and how to speed it up.</p>
</blockquote>

<div><p>In this article, we&#x2019;ll discuss how <code class="md-code md-code-inline">Object.prototype.toString()</code> performs in the V8 engine, why it&#x2019;s important, how it changed with the introduction of ES2015 symbols, and how the baseline performance can be improved by <strong>up to 6x</strong> (based on findings from Mozilla engineers).</p></div>

<blockquote><p>We&#x2019;re thrilled to welcome Benedikt <em>&#x2014; the tech lead for JavaScript execution optimization at Google &#x2014;</em> to Pony Foo. He&#x2019;s been sharing a great deal of insight into V8 performance internals and caveats elsewhere on the web, and we&#x2019;re happy to host him on Pony Foo as well! &#x23F1;</p><p align="right"><sub><em>&#x2014; Editor&#x2019;s note.</em></sub></p></blockquote>

<div><h1 id="introduction">Introduction</h1> <p>The <a href="http://ecma-international.org/ecma-262/6.0/" target="_blank" rel="noopener noreferrer">ECMAScript 2015 Language Standard</a> introduced the concept of so-called <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Well-known_symbols" target="_blank" rel="noopener noreferrer">well-known symbols</a> to the JavaScript language. These are special built-in symbols which represent internal language behaviors that were not exposed to developers in ECMAScript 5 and earlier. Examples of these are:</p> <ul> <li> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">Symbol.iterator</code></a>: A method returning the default iterator for an object. Used by <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">for..of</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">yield*</code></a>, the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="noopener noreferrer">spread operator</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener noreferrer">destructuring assignment</a>, etc.</p> </li> <li> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">Symbol.hasInstance</code></a>: A method for determining if a constructor object recognizes an object as its instance. Used by the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">instanceof</code></a> operator.</p> </li> <li> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">Symbol.toStringTag</code></a>: A string value used for the default description of an object, which is consulted by the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">Object.prototype.toString()</code></a> method.</p> </li> </ul> <p>Most of these newly introduced symbols affect several parts of the JavaScript language in non-trivial and cross-cutting ways, and lead to significant changes in the performance profile due to the additional <a href="https://en.wikipedia.org/wiki/Monkey_patch" target="_blank" rel="noopener noreferrer">monkey-patchability</a>. Operations that were not observable by JavaScript code are all of a sudden observable and the behavior of these operations can be changed by user code.</p> <p>One particularly interesting example of this is the new <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">Symbol.toStringTag</code></a> symbol, which is used to control the behavior of the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">Object.prototype.toString()</code></a> built-in method. For example, a developer can now put this special property on any instance, and it is then used instead of the default built-in tag when the <code class="md-code md-code-inline">toString</code> method is invoked:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">class</span> A {
  get [Symbol.toStringTag]() { <span class="md-code-keyword">return</span> <span class="md-code-string">&apos;A&apos;</span>; }
}
<span class="md-code-built_in">Object</span>.prototype.toString.call(&#x2018;&#x2019;);     <span class="md-code-comment">// &quot;[object String]&quot;</span>
<span class="md-code-built_in">Object</span>.prototype.toString.call({});     <span class="md-code-comment">// &quot;[object Object]&quot;</span>
<span class="md-code-built_in">Object</span>.prototype.toString.call(<span class="md-code-keyword">new</span> A);  <span class="md-code-comment">// &quot;[object A]&quot;</span>
</code></pre> <p>This requires that the implementation of <code class="md-code md-code-inline">Object.prototype.toString()</code> for ES2015 and later now converts its <strong><em>this</em></strong> <em>value</em> into an object first via the abstract operation <a href="https://tc39.github.io/ecma262/#sec-toobject" target="_blank" rel="noopener noreferrer">ToObject</a> and then looks for <code class="md-code md-code-inline">Symbol.toStringTag</code> on the resulting object and in its prototype chain. The <a href="https://tc39.github.io/ecma262/#sec-object.prototype.tostring" target="_blank" rel="noopener noreferrer">relevant part</a> of the language specification looks like this:</p> <figure class="figure-has-loaded"><img src="https://images.ponyfoo.com/uploads/object-prototype-tostring-8d733121570a47d4ae2132c85a59f36f.png" alt="Object.prototype.toString ()" title="object-prototype-tostring.png"></figure> <p>Here you can see the <a href="https://tc39.github.io/ecma262/#sec-toobject" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">ToObject</code></a> conversion as well as the <a href="https://tc39.github.io/ecma262/#sec-get-o-p" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">Get</code></a> for <code class="md-code md-code-inline">@@toStringTag</code> (this is special internal syntax for the language specification for the well-known symbol with the name <em>toStringTag</em>). The addition of <code class="md-code md-code-inline">Symbol.toStringTag</code> in ES2015 adds a lot of flexibility for developers, but at the same time comes at a cost.</p></div>

<div><h1 id="motivation">Motivation</h1> <p>The performance of the <code class="md-code md-code-inline">Object.prototype.toString()</code> method in Chrome and Node.js has been <a href="http://crbug.com/v8/5175" target="_blank" rel="noopener noreferrer">under investigation</a> in the past already, because it is used heavily by certain frameworks and libraries to perform type tests. For example, the <a href="https://angularjs.org/" target="_blank" rel="noopener noreferrer">AngularJS</a> framework uses it to implement various helper functions like <a href="https://github.com/angular/angular.js/blob/464dde8bd12d9be8503678ac5752945661e006a5/src/Angular.js#L616-L630" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">angular.isDate</code></a>, <a href="https://github.com/angular/angular.js/blob/464dde8bd12d9be8503678ac5752945661e006a5/src/Angular.js#L739-L741" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">angular.isArrayBuffer</code></a> and <a href="https://github.com/angular/angular.js/blob/464dde8bd12d9be8503678ac5752945661e006a5/src/Angular.js#L680-L689" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">angular.isRegExp</code></a> (among others):</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-comment">/**
 * @ngdoc function
 * @name angular.isDate
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */</span>
<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">isDate</span><span class="md-code-params">(value)</span> </span>{
  <span class="md-code-keyword">return</span> toString.call(value) === <span class="md-code-string">&apos;[object Date]&apos;</span>;
}
</code></pre> <p>Also popular libraries like <a href="https://lodash.com/" target="_blank" rel="noopener noreferrer">lodash</a> and <a href="http://underscorejs.org/" target="_blank" rel="noopener noreferrer">underscore.js</a> use <code class="md-code md-code-inline">Object.prototype.toString()</code> to implement checks on values, like the <a href="https://github.com/lodash/lodash/blob/6cb3460fcefe66cb96e55b82c6febd2153c992cc/isPlainObject.js#L13-L50" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">_.isPlainObject</code></a> or <a href="https://github.com/lodash/lodash/blob/6cb3460fcefe66cb96e55b82c6febd2153c992cc/isDate.js#L8-L25" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">_.isDate</code></a> predicates provided by lodash:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-comment">/**
 * Checks if `value` is classified as a `Date` object.
 *
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 * @example
 *
 * isDate(new Date)
 * // =&gt; true
 *
 * isDate(&apos;Mon April 23 2012&apos;)
 * // =&gt; false
 */</span>
<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">isDate</span><span class="md-code-params">(value)</span> </span>{
  <span class="md-code-keyword">return</span> isObjectLike(value) &amp;&amp; baseGetTag(value) == <span class="md-code-string">&apos;[object Date]&apos;</span>
}
</code></pre> <p>The Mozilla engineers working on the <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey" target="_blank" rel="noopener noreferrer">SpiderMonkey JavaScript engine</a> also <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1369042" target="_blank" rel="noopener noreferrer">identified</a> the <code class="md-code md-code-inline">Symbol.toStringTag</code> lookup in <code class="md-code md-code-inline">Object.prototype.toString()</code> as bottleneck for real-world performance, as part of their <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1245279" target="_blank" rel="noopener noreferrer">Speedometer investigation</a>. Running just the AngularJS subtest from the <a href="http://browserbench.org/Speedometer" target="_blank" rel="noopener noreferrer">Speedometer</a> benchmark suite using the internal V8 profiler (enabled by passing <code class="md-code md-code-inline">--no-sandbox --js-flags=--prof</code> as command line flags to Chrome) we can see that a significant portion of the overall time is spent performing the <code class="md-code md-code-inline">@@toStringTag</code> lookup (inside the <code class="md-code md-code-inline">GetPropertyStub</code>) and the <code class="md-code md-code-inline">ObjectProtoToString</code> code, which implements the <code class="md-code md-code-inline">Object.prototype.toString()</code> built-in method:</p> <figure><img alt="Speedometer AngularJS performance profile" title="angular-before.png" class="" src="https://images.ponyfoo.com/uploads/angular-before-66fc535bf2b6413889537b23b30dde89.png"></figure> <p><a href="https://twitter.com/jandemooij" target="_blank" rel="noopener noreferrer">Jan de Mooij</a> from the SpiderMonkey team crafted a simple micro-benchmark to specifically test the performance of <code class="md-code md-code-inline">Object.prototype.toString()</code> on Arrays:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">f</span><span class="md-code-params">()</span> </span>{
    <span class="md-code-keyword">var</span> res = <span class="md-code-string">&quot;&quot;</span>;
    <span class="md-code-keyword">var</span> a = [<span class="md-code-number">1</span>, <span class="md-code-number">2</span>, <span class="md-code-number">3</span>];
    <span class="md-code-keyword">var</span> toString = <span class="md-code-built_in">Object</span>.prototype.toString;
    <span class="md-code-keyword">var</span> t = <span class="md-code-keyword">new</span> <span class="md-code-built_in">Date</span>;
    <span class="md-code-keyword">for</span> (<span class="md-code-keyword">var</span> i = <span class="md-code-number">0</span>; i &lt; <span class="md-code-number">5000000</span>; i++) res = toString.call(a);
    print(<span class="md-code-keyword">new</span> <span class="md-code-built_in">Date</span> - t);
    <span class="md-code-keyword">return</span> res;
}
f();
</code></pre> <p>In fact, running this simple micro-benchmark using the internal profiler built into V8 (enabled in the <code class="md-code md-code-inline">d8</code> shell via the <code class="md-code md-code-inline">--prof</code> command line flag) already demonstrates the underlying problem: It is completely dominated by the <code class="md-code md-code-inline">Symbol.toStringTag</code> lookup on the <code class="md-code md-code-inline">[1,2,3]</code> array instance. Roughly 73% of the overall execution time is consumed by the negative property lookup (in the <code class="md-code md-code-inline">GetPropertyStub</code> that implements the generic property lookup), and another 3% are wasted in the <code class="md-code md-code-inline">ToObject</code> built-in, which is a no-op in case of arrays (since an Array is already an Object in the JavaScript sense).</p> <figure><img alt="Mozilla micro-benchmark performance profile (before)" title="mozilla-before.png" class="" src="https://images.ponyfoo.com/uploads/mozilla-before-a2de4ffc5dbc4c4db5e67b6670afeab0.png"></figure> <h1 id="interesting-symbols">Interesting symbols</h1> <p>The <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1369042#c0" target="_blank" rel="noopener noreferrer">proposed solution for SpiderMonkey</a> was to add the notion of an <em>interesting symbol</em>, which is a bit on every <a href="https://github.com/v8/v8/wiki/Design%20Elements" target="_blank" rel="noopener noreferrer">hidden class</a> that says whether instances with this hidden class may have a property whose name is <code class="md-code md-code-inline">@@toStringTag</code> or <code class="md-code md-code-inline">@@toPrimitive</code>. This way the expensive search for <code class="md-code md-code-inline">Symbol.toStringTag</code> can be avoided in the common case, where the lookup is negative anyways, which resulted in a <strong>2x</strong> improvement on the simple micro-benchmark for SpiderMonkey.</p> <p>Since I was looking specifically into some <a href="https://angularjs.org/" target="_blank" rel="noopener noreferrer">AngularJS</a> use cases, I was happy to find this idea and see that it works out well. So I started thinking about the <a href="https://docs.google.com/document/d/1q_Y2YM8S055RF1R6qvDe65kOEVO99tdviI1vaDcbnmc/edit#" target="_blank" rel="noopener noreferrer">design</a> and eventually <a href="https://chromium-review.googlesource.com/c/593620" target="_blank" rel="noopener noreferrer">ported</a> it to V8, although limited to just <code class="md-code md-code-inline">Symbol.toStringTag</code> and <code class="md-code md-code-inline">Object.prototype.toString()</code> for now, as I haven&#x2019;t found evidence (yet) that <code class="md-code md-code-inline">Symbol.toPrimitive</code> is a major pain point in Chrome or Node.js. The fundamental idea is that by default we assume that instances don&#x2019;t have <em>interesting symbols</em>, and every time we add a new property to an instance, we check whether that property&#x2019;s name is an <em>interesting symbol</em>, and if so we set the bit on the instances hidden classes.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> obj = {};
<span class="md-code-built_in">Object</span>.prototype.toString.call(obj);  <span class="md-code-comment">// fast-path</span>
obj[Symbol.toStringTag] = <span class="md-code-string">&apos;a&apos;</span>;
<span class="md-code-built_in">Object</span>.prototype.toString.call(obj);  <span class="md-code-comment">// slow-path</span>
</code></pre> <p>Check this simple example: Here <code class="md-code md-code-inline">obj</code> starts life as an instance with definitely no <em>interesting symbols</em> on it. So the first call to <code class="md-code md-code-inline">Object.prototype.toString()</code> takes the new fast-path, where the <code class="md-code md-code-inline">Symbol.toStringTag</code> lookup can be skipped (also because the <code class="md-code md-code-inline">Object.prototype</code> doesn&#x2019;t have any <em>interesting symbols</em> on it), whereas the second call takes the generic slow-path because <code class="md-code md-code-inline">obj</code> now has an <em>interesting symbol</em>.</p> <h1 id="performance">Performance</h1> <p>Implementing this mechanism in V8 improves the performance on the above mentioned micro-benchmark by roughly <strong>5.8x</strong> on a Z620 Linux workstation. And checking the performance profile again, we can see that we no longer spend time in the <code class="md-code md-code-inline">GetPropertyStub</code>, but the micro-benchmark is now dominated by the <code class="md-code md-code-inline">Object.prototype.toString()</code> built-in as expected:</p> <figure><img alt="Mozilla micro-benchmark performance profile (after)" title="mozilla-after.png" class="" src="https://images.ponyfoo.com/uploads/mozilla-after-9f219c80c8ee4a418d0ff3da0ac91603.png"></figure> <p>Running this on a <a href="https://gist.github.com/bmeurer/cc4a6c97d244eb4c8c0738bd4b8c3319" target="_blank" rel="noopener noreferrer">slightly more realistic benchmark</a>, which passes different values to <code class="md-code md-code-inline">Object.prototype.toString()</code>, including primitives and objects which have a custom <code class="md-code md-code-inline">Symbol.toStringTag</code> property, shows up to <strong>6.5x</strong> improvements in the latest V8 compared to V8 6.1.</p> <figure><img alt="Micro-benchmark results" title="results-microbenchmark.png" class="" src="https://images.ponyfoo.com/uploads/results-microbenchmark-7a8e974c49d24e7c9c5b5e22ebfa784f.png"></figure> <p>Measuring the impact on the <a href="http://browserbench.org/Speedometer" target="_blank" rel="noopener noreferrer">Speedometer</a> browser benchmark, specifically the AngularJS subtest in the benchmark suite, it seems to yield a 1% overall improvement on the full suite and a solid 3% on the AngularJS subtest.</p> <figure><img alt="Speedometer results" title="results-speedometer.png" class="" src="https://images.ponyfoo.com/uploads/results-speedometer-8d819bdc516c4e71bdf049bd1910369f.png"></figure> <h1 id="conclusion">Conclusion</h1> <p>Even a highly optimized built-in like <code class="md-code md-code-inline">Object.prototype.toString()</code> still provides some potential for further optimization - leading up to <strong>6.5x improvements</strong> in throughput - if you dig deep enough into appropriate performance tests (like the Speedometer AngularJS benchmark in this case). Kudos to <a href="https://twitter.com/jandemooij" target="_blank" rel="noopener noreferrer">Jan de Mooij</a> and <a href="http://twitter.com/evilpies" target="_blank" rel="noopener noreferrer">Tom Schuster</a> from Mozilla for doing the investigation in this case, and coming up with the cool idea of <em>interesting symbols</em>!</p> <p>It&#x2019;s worth noting that JavaScriptCore, the JavaScript engine used by <a href="https://webkit.org/" target="_blank" rel="noopener noreferrer">WebKit</a>, caches the result of subsequent <code class="md-code md-code-inline">Object.prototype.toString()</code> calls on the hidden class of the receiver instance (that cache was <a href="https://bugs.webkit.org/show_bug.cgi?id=84781" target="_blank" rel="noopener noreferrer">introduced in early 2012</a>, so it predates ES2015). It&#x2019;s a very interesting strategy, but it has limited applicability (i.e. it doesn&#x2019;t help with other well-known symbols like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">Symbol.toPrimitive</code></a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">Symbol.hasInstance</code></a>) and requires pretty complex <a href="https://github.com/WebKit/webkit/blob/29330a72e9d9e8a0fff4ec77c65eb18020695a96/Source/JavaScriptCore/runtime/StructureRareData.cpp#L113-L169" target="_blank" rel="noopener noreferrer">invalidation logic</a> to react to changes in the prototype chain, which is why I decided against a caching based solution in V8 (for now).</p></div>
